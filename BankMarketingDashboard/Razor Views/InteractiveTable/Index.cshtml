<script>
    // Called by the global filter UI (left sidebar). Returns true on success.
    window.applyFilters = async function(qs) {
        try {
            const url = '/InteractiveTable/TablePartial' + (qs ? ('?' + qs) : '');
            console.debug('[applyFilters] requesting', { qs, url });

            const res = await fetch(url, { method: 'GET', headers: { 'X-Requested-With': 'XMLHttpRequest' } });

            console.debug('[applyFilters] response status', res.status);
            const text = await res.text().catch(() => '');

            // Debug: length and a short preview to help diagnose empty responses
            console.debug('[applyFilters] response text length', text.length);
            if (text && text.length > 0) {
                // Optional: small preview (first 300 chars) for debugging
                console.debug('[applyFilters] response preview', text.slice(0, 300));
            } else {
                console.warn('[applyFilters] server returned empty body');
            }

            if (!res.ok) {
                console.error('[applyFilters] server error', res.status, text || '[no body]');
                return false;
            }

            const container = document.querySelector('.chart-container');
            if (!container) throw new Error('Table container not found');

            // If response is empty, show a friendly fallback instead of leaving blank
            if (!text || !text.trim()) {
                container.innerHTML = '<div class="no-data p-4 text-center text-muted"><h5>No data returned from server</h5><p>Check DevTools Network tab and server logs.</p></div>';
                return false;
            }

            // Insert returned partial HTML
            container.innerHTML = text;

            // reinitialize sorting and other behaviours (only when table present)
            if (document.querySelector('#interactiveTable')) {
                initTableInteractivity();
            } else {
                console.debug('[applyFilters] no #interactiveTable found in returned HTML (maybe zero results)');
            }

            console.debug('[applyFilters] update applied successfully');
            return true;
        } catch (err) {
            console.error('applyFilters failed', err);
            return false;
        }
    };
</script>