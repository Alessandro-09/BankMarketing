@model List<BankMarketingDashboard.Models.CampaignRecord>
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Interactive Table";
    var currentPage = ViewBag.CurrentPage as int? ?? 1;
    var totalPages = ViewBag.TotalPages as int? ?? 1;
    var totalRecords = ViewBag.TotalRecords as int? ?? 0;

    int? filterMinAge = ViewBag.FilterMinAge as int?;
    int? filterMaxAge = ViewBag.FilterMaxAge as int?;
    string filterJob = ViewBag.FilterJob as string ?? "";
    string filterMarital = ViewBag.FilterMarital as string ?? "";
    string filterEducation = ViewBag.FilterEducation as string ?? "";
    string filterMonth = ViewBag.FilterMonth as string ?? "";
    string filterY = ViewBag.FilterY as string ?? "";
}

<div class="dashboard-container">
    <h2>Interactive Data Table</h2>
    <p class="text-muted">Showing @(currentPage * 100 - 99) to @(Math.Min(currentPage * 100, totalRecords)) of @totalRecords records</p>

    <div class="chart-container">
        @Html.Partial("_InteractiveTablePartial", Model)
    </div>

    <style>
        .pagination .active .page-link {
            background-color: #CB3CFF !important;
            border-color: #CB3CFF !important;
        }

        .page-link {
            color: #ddd !important;
            background-color: #121228 !important;
            border: 1px solid #1a1a33 !important;
        }

        .page-link:hover {
            background-color: #1a1a33 !important;
        }
    </style>
</div>

@section Scripts {
    <script>
        // encapsulate sorting init so it can be re-run after AJAX replace
        function initTableInteractivity() {
            document.querySelectorAll('#interactiveTable th').forEach((th, i) => {
                th.style.cursor = 'pointer';
                // remove existing listeners by cloning node (avoid duplicates)
                const newTh = th.cloneNode(true);
                th.parentNode.replaceChild(newTh, th);
                newTh.addEventListener('click', () => {
                    const table = newTh.closest('table');
                    const tbody = table.querySelector('tbody');
                    const rows = Array.from(tbody.querySelectorAll('tr'));
                    const isAsc = newTh.classList.contains('sorted-asc');

                    rows.sort((a, b) => {
                        const aValue = a.cells[i].textContent.trim();
                        const bValue = b.cells[i].textContent.trim();
                        const aNum = parseFloat(aValue.replace(/[^0-9.-]+/g,""));
                        const bNum = parseFloat(bValue.replace(/[^0-9.-]+/g,""));

                        if (!isNaN(aNum) && !isNaN(bNum)) {
                            return isAsc ? bNum - aNum : aNum - bNum;
                        }
                        return isAsc
                            ? bValue.localeCompare(aValue)
                            : aValue.localeCompare(bValue);
                    });

                    // Update classes
                    table.querySelectorAll('th').forEach(t => t.classList.remove('sorted-asc', 'sorted-desc'));
                    newTh.classList.toggle('sorted-asc', !isAsc);
                    newTh.classList.toggle('sorted-desc', isAsc);

                    // Reinsert rows
                    rows.forEach(row => tbody.appendChild(row));
                });
            });
        }

        // Called by the global filter UI (left sidebar). Returns true on success.
        window.applyFilters = async function(qs) {
            try {
                const url = '/InteractiveTable/TablePartial' + (qs ? ('?' + qs) : '');
                const res = await fetch(url, { method: 'GET', headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                if (!res.ok) throw new Error('Server returned ' + res.status);
                const html = await res.text();
                const container = document.querySelector('.chart-container');
                if (!container) throw new Error('Table container not found');
                container.innerHTML = html;

                // reinitialize sorting and other behaviours
                initTableInteractivity();

                return true;
            } catch (err) {
                console.error('applyFilters failed', err);
                return false;
            }
        };

        document.addEventListener('DOMContentLoaded', () => {
            initTableInteractivity();
        });
    </script>
}