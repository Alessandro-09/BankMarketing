@using BankMarketingDashboard.Models
@{
    ViewData["Title"] = "Reports";

    // KPIs
    // Variables con indicadores clave calculados en el controlador.
    var totalContacts = ViewBag.TotalContacts as int? ?? 0;
    var conversionRate = ViewBag.ConversionRate as double? ?? 0;
    var avgDuration = ViewBag.AvgDuration as double? ?? 0;
    var successfulCalls = ViewBag.SuccessfulCalls as int? ?? 0;

    // Conjuntos de datos recibidos desde el servidor (ViewBag).
    // Se esperan listas ya agregadas y agregadas/normalizadas por el controlador.
    var maritalData = ViewBag.MaritalData as List<ChartPoint> ?? new List<ChartPoint>();
    var jobData = ViewBag.JobData as List<ChartPoint> ?? new List<ChartPoint>();
    var educationData = ViewBag.EducationData as List<ChartPoint> ?? new List<ChartPoint>();
    var contactData = ViewBag.ContactData as List<ChartPoint> ?? new List<ChartPoint>();
    var ageData = ViewBag.AgeData as List<ChartPoint> ?? new List<ChartPoint>();
    var conversionByAge = ViewBag.ConversionByAge as List<ChartPoint> ?? new List<ChartPoint>();

    // Conjuntos concretos para gráficos adicionales (tipados).
    var defaultData = ViewBag.DefaultData as List<ChartPoint> ?? new List<ChartPoint>();
    var housingData = ViewBag.HousingData as List<ChartPoint> ?? new List<ChartPoint>();
    var loanData = ViewBag.LoanData as List<ChartPoint> ?? new List<ChartPoint>();
    var monthConversion = ViewBag.MonthConversion as List<ChartPoint> ?? new List<ChartPoint>();
    var dayConversion = ViewBag.DayConversion as List<ChartPoint> ?? new List<ChartPoint>();
    var boxplotData = ViewBag.BoxplotDuration as List<BoxplotPoint> ?? new List<BoxplotPoint>();
    var poutcomeStack = ViewBag.PoutcomeStack as List<PoutcomePoint> ?? new List<PoutcomePoint>();
    var campaignScatter = ViewBag.CampaignScatter as List<CampaignPoint> ?? new List<CampaignPoint>();
}

<div class="dashboard-container">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <h2 class="mb-0">Marketing Campaign Dashboard</h2>
        <div>
            <button id="exportPdfBtn" class="btn btn-outline-light btn-sm me-2">Export PDF</button>
        </div>
    </div>

    <!-- KPI resumen -->
    <div class="kpi-cards mb-4" role="region" aria-label="KPIs principales">
        <div class="card kpi-card">
            <div class="card-body">
                <div class="kpi-meta">
                    <h6>Total contacts</h6>
                    <small>Total de contactos</small>
                </div>
                <div class="kpi-value">@totalContacts.ToString("N0")</div>
            </div>
        </div>

        <div class="card kpi-card">
            <div class="card-body">
                <div class="kpi-meta">
                    <h6>Conversion rate</h6>
                    <small>Tasa de conversión</small>
                </div>
                <div class="kpi-value">@conversionRate.ToString("F2")% </div>
            </div>
        </div>

        <div class="card kpi-card">
            <div class="card-body">
                <div class="kpi-meta">
                    <h6>Avg. duration</h6>
                    <small>Duración media (s)</small>
                </div>
                <div class="kpi-value">@avgDuration.ToString("F0") s</div>
            </div>
        </div>

        <div class="card kpi-card">
            <div class="card-body">
                <div class="kpi-meta">
                    <h6>Successful calls</h6>
                    <small>Llamadas exitosas</small>
                </div>
                <div class="kpi-value">@successfulCalls.ToString("N0")</div>
            </div>
        </div>
    </div>

    <!-- Contenedores de gráficos -->
    <div class="row">

        <!-- Civil Status Distribution -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Civil Status Distribution</h5>
                <canvas id="maritalChart"></canvas>
            </div>
        </div>

        <!-- Occupation Distribution -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Occupation Distribution</h5>
                <canvas id="jobChart"></canvas>
            </div>
        </div>

        <!-- Education Level -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Education Level</h5>
                <canvas id="educationChart"></canvas>
            </div>
        </div>

        <!-- Contact Channel -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Contact Channel</h5>
                <canvas id="contactChart"></canvas>
            </div>
        </div>

        <!-- Age Distribution -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Age Distribution</h5>
                <canvas id="ageChart"></canvas>
            </div>
        </div>

        <!-- Conversion Rate by Age Group -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Conversion Rate by Age Group</h5>
                <canvas id="conversionAgeChart"></canvas>
            </div>
        </div>

        <!-- Credit in default -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Credit in default</h5>
                <canvas id="defaultChart"></canvas>
            </div>
        </div>

        <!-- Housing Loan -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Housing Loan</h5>
                <canvas id="housingChart"></canvas>
            </div>
        </div>

        <!-- Personal Loan -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Personal Loan</h5>
                <canvas id="loanChart"></canvas>
            </div>
        </div>

        <!-- Monthly conversion trend -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Monthly Conversion Rate Trend</h5>
                <canvas id="monthConvChart"></canvas>
            </div>
        </div>

        <!-- Weekday heatmap simplified -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Weekday Conversion Rate Heatmap</h5>
                <canvas id="dayHeatmap"></canvas>
            </div>
        </div>

        <!-- Call duration distribution -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Call Duration Distribution by Outcome</h5>
                <canvas id="durationBoxplot"></canvas>
            </div>
        </div>

        <!-- Previous campaign outcome -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Previous Campaign Outcome vs Subscription</h5>
                <canvas id="poutcomeStacked"></canvas>
            </div>
        </div>

        <!-- Campaign scatter/bubble -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Campaign Contact Count vs Conversion Rate</h5>
                <canvas id="campaignScatter"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-chart-boxplot@3.1.0/build/Chart.BoxPlot.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-chart-matrix@2.0.0/dist/chartjs-chart-matrix.min.js"></script>

    <script data-dash-init>

        // ----------------------------
        // SERIALIZACIÓN DE DATOS (server -> cliente)
        // ----------------------------

        // Aquí convertimos las colecciones Razor en literales JS.
        const maritalLabels = @Html.Raw(Json.Serialize(maritalData.Select(m => m.Label ?? "Unknown").ToArray()));
        const maritalValues = @Html.Raw(Json.Serialize(maritalData.Select(m => m.Value).ToArray()));

        const jobLabels = @Html.Raw(Json.Serialize(jobData.Select(j => j.Label ?? "Unknown").ToArray()));
        const jobValues = @Html.Raw(Json.Serialize(jobData.Select(j => j.Value).ToArray()));

        const educationLabels = @Html.Raw(Json.Serialize(educationData.Select(e => e.Label ?? "Unknown").ToArray()));
        const educationValues = @Html.Raw(Json.Serialize(educationData.Select(e => e.Value).ToArray()));

        const contactLabels = @Html.Raw(Json.Serialize(contactData.Select(c => c.Label ?? "Unknown").ToArray()));
        const contactValues = @Html.Raw(Json.Serialize(contactData.Select(c => c.Value).ToArray()));

        const ageLabels = @Html.Raw(Json.Serialize(ageData.Select(a => a.Label).ToArray()));
        const ageValues = @Html.Raw(Json.Serialize(ageData.Select(a => a.Value).ToArray()));

        const conversionAgeLabels = @Html.Raw(Json.Serialize(conversionByAge.Select(c => c.Label).ToArray()));
        const conversionAgeValues = @Html.Raw(Json.Serialize(conversionByAge.Select(c => c.Value).ToArray()));

        const defaultLabels = @Html.Raw(Json.Serialize(defaultData.Select(d => d.Label).ToArray()));
        const defaultValues = @Html.Raw(Json.Serialize(defaultData.Select(d => d.Value).ToArray()));

        const housingLabels = @Html.Raw(Json.Serialize(housingData.Select(d => d.Label).ToArray()));
        const housingValues = @Html.Raw(Json.Serialize(housingData.Select(d => d.Value).ToArray()));

        const loanLabels = @Html.Raw(Json.Serialize(loanData.Select(d => d.Label).ToArray()));
        const loanValues = @Html.Raw(Json.Serialize(loanData.Select(d => d.Value).ToArray()));

        const monthLabels = @Html.Raw(Json.Serialize(monthConversion.Select(m => m.Label).ToArray()));
        const monthValues = @Html.Raw(Json.Serialize(monthConversion.Select(m => m.Value).ToArray()));

        const dayLabels = @Html.Raw(Json.Serialize(dayConversion.Select(d => d.Label).ToArray()));
        const dayValues = @Html.Raw(Json.Serialize(dayConversion.Select(d => d.Value).ToArray()));

        const boxplotRaw = @Html.Raw(Json.Serialize(boxplotData));
        const poutcomeRaw = @Html.Raw(Json.Serialize(poutcomeStack));
        const campaignRaw = @Html.Raw(Json.Serialize(campaignScatter));

        // depuración
        console.debug('DATA LENGTHS', {
            boxplot: (boxplotRaw || []).length,
            poutcome: (poutcomeRaw || []).length,
            campaign: (campaignRaw || []).length
        });

        // ----------------------------
        // UTILIDADES COMUNES
        // ----------------------------

        // Muestra texto cuando falta información para un gráfico.
        function showNoDataFor(canvasId, msg) {
            const canvas = document.getElementById(canvasId);
            if (!canvas) return;
            const container = canvas.closest('.chart-container');
            if (!container) return;
            if (container.querySelector('.no-data')) return;
            const el = document.createElement('div');
            el.className = 'no-data mt-2 text-muted';
            el.textContent = msg || 'No data to display';
            container.appendChild(el);
        }

        // Formateador numérico (US) para tooltips y textos compactos.
        const numberFormatter = new Intl.NumberFormat('en-US');

        // Convierte arrays heterogéneos a números seguros.
        function safeNumbers(arr) {
            if (!Array.isArray(arr)) return [];
            return arr.map(v => {
                const n = Number(v);
                return Number.isFinite(n) ? n : 0;
            });
        }

        // Crea un chart y guarda instancia para destrucción posterior.
        function initChart(canvasId, factory) {
            const canvas = document.getElementById(canvasId);
            if (!canvas) return null;
            const ctx = canvas.getContext('2d');
            try {
                const cfg = factory(ctx);
                const chart = new Chart(ctx, cfg);
                canvas._chartInstance = chart;
                return chart;
            } catch (e) {
                // Si falla la creación, mostrar aviso y no interrumpir el resto.
                console.error('Error creating chart', canvasId, e);
                showNoDataFor(canvasId, 'Chart failed to render');
                return null;
            }
        }

        // Destruye instancias previas para evitar errores "canvas in use".
        function destroyIfExists(id) {
            const el = document.getElementById(id);
            if (!el) return;
            try {
                const reg = (window.Chart && typeof Chart.getChart === 'function') ? Chart.getChart(el) : null;
                if (reg) { try { reg.destroy(); } catch (e) { console.warn('destroy registered chart failed', e); } }
            } catch (e) {  }
            if (el._chartInstance) {
                try { el._chartInstance.destroy(); } catch (e) { console.warn('destroy _chartInstance failed', e); }
                el._chartInstance = null;
            }
            try { el.removeAttribute && el.removeAttribute('data-chartjs'); } catch (e) {}
        }

        // Opciones comunes para la mayoría de gráficos (estética y comportamiento)
        const commonOpts = {
            responsive: true,
            maintainAspectRatio: false,
            interaction: { mode: 'nearest', intersect: false },
            plugins: {
                legend: { labels: { color: 'white' } },
                tooltip: { callbacks: { label: ctx => {
                    if (ctx.raw && typeof ctx.raw === 'object' && ctx.raw.v !== undefined) return `${numberFormatter.format(ctx.raw.v)}%`;
                    return numberFormatter.format(ctx.raw);
                } } }
            },
            scales: { x: { ticks: { color: 'white' } }, y: { ticks: { color: 'white' } } }
        };

        // ----------------------------
        // RENDERIZADO DE GRÁFICOS
        // ----------------------------

        try {
            // Civil Status Distribution
            // proporciones por estado civil
            // Contiene: etiquetas 'marital' y conteos
            // Tipo: doughnut.
            destroyIfExists('maritalChart');
            initChart('maritalChart', ctx => ({
                type: 'doughnut',
                data: { labels: maritalLabels, datasets: [{ data: safeNumbers(maritalValues), backgroundColor: ['#CB3CFF','#4e73df','#1cc88a','#e74a3b'], borderWidth: 2 }] },
                options: { ...commonOpts, plugins: { ...commonOpts.plugins, legend: { position: 'right' } } }
            }));

            // Occupation Distribution
            // recuento por ocupación
            // Contiene: etiquetas 'job' y valores
            // Tipo: barra vertical.
            destroyIfExists('jobChart');
            initChart('jobChart', ctx => ({
                type: 'bar',
                data: { labels: jobLabels, datasets: [{ data: safeNumbers(jobValues), backgroundColor: '#CB3CFF' }] },
                options: { ...commonOpts, scales: { y: { beginAtZero: true } }, plugins: { ...commonOpts.plugins, legend: { display: false } } }
            }));

            // Education Level
            // recuentos por nivel educativo
            // Contiene: etiquetas 'education' y valores
            // Tipo: barra horizontal.
            destroyIfExists('educationChart');
            initChart('educationChart', ctx => ({
                type: 'bar',
                data: { labels: educationLabels, datasets: [{ data: safeNumbers(educationValues), backgroundColor: '#4e73df' }] },
                options: { ...commonOpts, indexAxis: 'y', scales: { x: { beginAtZero: true } }, plugins: { ...commonOpts.plugins, legend: { display: false } } }
            }));

            // Contact Channel
            // distribución por canal (cellular/telephone)
            // Contiene: etiquetas 'contact' y valores
            // Tipo: barra.
            destroyIfExists('contactChart');
            initChart('contactChart', ctx => ({
                type: 'bar',
                data: { labels: contactLabels, datasets: [{ data: safeNumbers(contactValues), backgroundColor: ['#CB3CFF','#1cc88a'] }] },
                options: { ...commonOpts, scales: { y: { beginAtZero: true } }, plugins: { ...commonOpts.plugins, legend: { display: false } } }
            }));

            // Age Distribution
            // distribución de contactos por rango de edad
            // Contiene: etiquetas de rango y conteos
            // Tipo: barra.
            destroyIfExists('ageChart');
            initChart('ageChart', ctx => ({
                type: 'bar',
                data: { labels: ageLabels, datasets: [{ data: safeNumbers(ageValues), backgroundColor: '#e74a3b' }] },
                options: { ...commonOpts, scales: { y: { beginAtZero: true } }, plugins: { ...commonOpts.plugins, legend: { display: false } } }
            }));

            // Conversion Rate by Age Group
            // tasa de conversión (%) por grupo de edad
            // Contiene: etiquetas de edad y porcentaje
            // Tipo: barra.
            destroyIfExists('conversionAgeChart');
            initChart('conversionAgeChart', ctx => ({
                type: 'bar',
                data: { labels: conversionAgeLabels, datasets: [{ data: safeNumbers(conversionAgeValues), backgroundColor: '#1cc88a' }] },
                options: { ...commonOpts, scales: { y: { beginAtZero: true, ticks: { callback: v => v + '%' } } }, plugins: { ...commonOpts.plugins, legend: { display: false } } }
            }));

            // Credit in default
            // comparación por estado de 'default' (yes/no/unknown)
            // Contiene: etiquetas y conteos
            // Tipo: barra.
            destroyIfExists('defaultChart');
            initChart('defaultChart', ctx => ({
                type: 'bar',
                data: { labels: defaultLabels, datasets: [{ data: safeNumbers(defaultValues), backgroundColor: '#8b5cf6' }] },
                options: { ...commonOpts, scales: { y: { beginAtZero: true } }, plugins: { ...commonOpts.plugins, legend: { display: false } } }
            }));

            // Housing Loan
            // comparación por housing (yes/no/unknown)
            // Contiene: etiquetas y conteos
            // Tipo: barra.
            destroyIfExists('housingChart');
            initChart('housingChart', ctx => ({
                type: 'bar',
                data: { labels: housingLabels, datasets: [{ data: safeNumbers(housingValues), backgroundColor: '#4e73df' }] },
                options: { ...commonOpts, scales: { y: { beginAtZero: true } }, plugins: { ...commonOpts.plugins, legend: { display: false } } }
            }));

            // Personal Loan
            // comparación por loan (yes/no/unknown)
            // Contiene: etiquetas y conteos
            // Tipo: barra.
            destroyIfExists('loanChart');
            initChart('loanChart', ctx => ({
                type: 'bar',
                data: { labels: loanLabels, datasets: [{ data: safeNumbers(loanValues), backgroundColor: '#1cc88a' }] },
                options: { ...commonOpts, scales: { y: { beginAtZero: true } }, plugins: { ...commonOpts.plugins, legend: { display: false } } }
            }));

            // Monthly Conversion Rate Trend
            // tendencia mensual de la tasa de conversión
            // Contiene: meses y porcentaje
            // Tipo: línea.
            destroyIfExists('monthConvChart');
            initChart('monthConvChart', ctx => ({
                type: 'line',
                data: { labels: monthLabels, datasets: [{ label: 'Conversion rate (%)', data: safeNumbers(monthValues), borderColor: '#CB3CFF', backgroundColor: 'rgba(203,60,255,0.12)', fill: true, tension: 0.35 }] },
                options: { ...commonOpts, scales: { y: { beginAtZero: true } }, plugins: { ...commonOpts.plugins, tooltip: { callbacks: { label: ctx => `${numberFormatter.format(ctx.raw)}%` } } } }
            }));

            // Weekday Conversion Rate 
            // muestra la tasa de conversión por día de la semana con una barra horizontal coloreada.
            // Contiene: etiquetas día (mon..fri) y porcentaje
            // Tipo: barra horizontal con gradiente por valor.
            destroyIfExists('dayHeatmap');
            (function () {
                const canvas = document.getElementById('dayHeatmap');
                if (!canvas) return;
                const ctx = canvas.getContext('2d');

                const labels = (dayLabels || []).slice();
                const values = safeNumbers(dayValues || []);
                if (!labels.length || values.length === 0) { showNoDataFor('dayHeatmap'); return; }

                const maxVal = Math.max(...values, 1);
                function colorForValue(v) { const pct = Math.max(0, Math.min(1, v / maxVal)); const hue = Math.round(60 + (140 - 60) * pct); const sat = Math.round(55 + 30 * pct); const light = Math.round(88 - 40 * pct); return `hsl(${hue} ${sat}% ${light}%)`; }
                function textColorForValue(v) { return (v / maxVal) > 0.6 ? '#022' : '#fff'; }

                const barLabelPlugin = {
                    id: 'barLabelPlugin',
                    afterDatasetDraw(chart) {
                        const dataset = chart.data.datasets[0];
                        const meta = chart.getDatasetMeta(0);
                        const ctx = chart.ctx;
                        ctx.save();
                        meta.data.forEach((bar, index) => {
                            const v = dataset.data[index] ?? 0;
                            const text = `${v}%`;
                            const fontSize = Math.max(10, Math.round(bar.height * 0.4));
                            ctx.font = `${fontSize}px "Helvetica", "Arial", sans-serif`;
                            ctx.textBaseline = 'middle';
                            const padding = 6;
                            const insideX = bar.x - padding;
                            const outsideX = bar.x + padding;
                            const y = bar.y;
                            const w = ctx.measureText(text).width;
                            const insideAvailable = insideX - (bar.base || 0) > w + 8;
                            ctx.fillStyle = insideAvailable ? textColorForValue(v) : '#fff';
                            const x = insideAvailable ? insideX - w : outsideX;
                            ctx.fillText(text, x, y);
                        });
                        ctx.restore();
                    }
                };

                const bgColors = values.map(colorForValue);
                const chart = new Chart(ctx, {
                    type: 'bar',
                    data: { labels, datasets: [{ label: 'Conversion rate (%)', data: values, backgroundColor: bgColors, borderColor: 'rgba(0,0,0,0.08)', borderWidth: 1, maxBarThickness: 48 }] },
                    options: {
                        indexAxis: 'y',
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: { beginAtZero: true, ticks: { callback: v => `${v}%`, color: 'white' }, grid: { color: 'rgba(255,255,255,0.06)' } },
                            y: { ticks: { color: 'white' }, grid: { display: false } }
                        },
                        plugins: {
                            legend: { display: false },
                            tooltip: { callbacks: { label: ctx => { const day = ctx.label ?? ''; const val = ctx.parsed.x ?? 0; return `${day}: ${numberFormatter.format(val)}%`; } } }
                        },
                        interaction: { mode: 'nearest', intersect: false }
                    },
                    plugins: [barLabelPlugin]
                });
                canvas._chartInstance = chart;
            })();

            // Call Duration distribution
            // resume la distribución de la duración por resultado (yes/no)
            // Contiene: min, Q1, median, Q3, max
            // Tipo: boxplot (si plugin disponible) o barra de medianas como fallback.
            destroyIfExists('durationBoxplot');
            (function () {
                const canvas = document.getElementById('durationBoxplot');
                if (!canvas) return;
                const ctx = canvas.getContext('2d');
                const labels = (boxplotRaw || []).map(b => b.label ?? b.Label ?? '');
                try {
                    const data = (boxplotRaw || []).map(b => [ Number(b.min ?? b.Min ?? 0), Number(b.q1 ?? b.Q1 ?? 0), Number(b.median ?? b.Median ?? 0), Number(b.q3 ?? b.Q3 ?? 0), Number(b.max ?? b.Max ?? 0) ]);
                    if (!labels.length || data.every(d => d.every(v => v === 0))) { showNoDataFor('durationBoxplot'); return; }
                    const chart = new Chart(ctx, {
                        type: 'boxplot',
                        data: { labels, datasets: [{ label: 'Duration (s)', backgroundColor: '#4e73df', borderColor: '#081028', data }] },
                        options: { ...commonOpts, plugins: { legend: { display: false }, tooltip: { callbacks: { label: t => { const arr = t.raw || []; return `Min ${numberFormatter.format(arr[0])}, Q1 ${numberFormatter.format(arr[1])}, Median ${numberFormatter.format(arr[2])}, Q3 ${numberFormatter.format(arr[3])}, Max ${numberFormatter.format(arr[4])}`; } } } }, scales: { x: { ticks: { color: 'white' } }, y: { ticks: { color: 'white' }, beginAtZero: true } }, interaction: { mode: 'nearest', intersect: false } }
                    });
                    canvas._chartInstance = chart;
                } catch (err) {
                    console.warn('Boxplot plugin not available or failed, fallback a mediana.', err);
                    try { const reg = (window.Chart && typeof Chart.getChart === 'function') ? Chart.getChart(canvas) : null; if (reg) reg.destroy(); } catch (e) {}
                    canvas._chartInstance = null;
                    const medians = (boxplotRaw || []).map(b => { const m = Number(b.median ?? b.Median ?? 0); return Number.isFinite(m) ? m : 0; });
                    if (!labels.length || medians.length === 0) { showNoDataFor('durationBoxplot'); return; }
                    const barChart = new Chart(ctx, { type: 'bar', data: { labels, datasets: [{ label: 'Median duration (s)', data: medians, backgroundColor: '#4e73df' }] }, options: { ...commonOpts, scales: { y: { beginAtZero: true } }, plugins: { ...commonOpts.plugins, legend: { display: false } } } });
                    canvas._chartInstance = barChart;
                }
            })();

            // Poutcome stacked
            // compara resultados previos (poutcome) y desglosa yes/no
            // Contiene: etiquetas de poutcome y conteos
            // Tipo: barra apilada.
            destroyIfExists('poutcomeStacked');
            (function () {
                const canvas = document.getElementById('poutcomeStacked');
                if (!canvas) return;
                const ctx = canvas.getContext('2d');
                const labels = (poutcomeRaw || []).map(p => p.Label ?? p.label ?? '');
                const yesData = (poutcomeRaw || []).map(p => Number(p.Yes ?? p.yes ?? 0));
                const noData = (poutcomeRaw || []).map(p => Number(p.No ?? p.no ?? 0));
                if (!labels.length) return;
                const chart = new Chart(ctx, {
                    type: 'bar',
                    data: { labels, datasets: [{ label: 'No', data: noData, backgroundColor: '#6b7280' }, { label: 'Yes', data: yesData, backgroundColor: '#1cc88a' }] },
                    options: { responsive: true, plugins: { tooltip: { callbacks: { label: ctx => `${ctx.dataset.label}: ${numberFormatter.format(Number(ctx.raw || 0))}` } }, legend: { labels: { color: 'white' } } }, scales: { x: { ticks: { color: 'white' }, stacked: true }, y: { ticks: { color: 'white' }, stacked: true, beginAtZero: true } }, interaction: { mode: 'nearest', intersect: false } }
                });
                canvas._chartInstance = chart;
            })();

            // Campaign scatter (bubble)
            // muestra por campaña la tasa de conversión y tamaño relativo por volumen
            // Contiene: puntos con x=campaign, y=conversionRate, r~Total
            // Tipo: bubble.
            destroyIfExists('campaignScatter');
            (function () {
                const canvas = document.getElementById('campaignScatter');
                if (!canvas) return;
                const ctx = canvas.getContext('2d');
                const pts = (campaignRaw || []).map(p => ({ x: Number(p.Campaign ?? p.campaign ?? 0), y: Number(p.ConversionRate ?? p.conversionRate ?? 0), r: Math.max(3, Math.log((Number(p.Total ?? p.total ?? 1) + 1)) * 2), meta: p }));
                if (!pts.length) return;
                const chart = new Chart(ctx, {
                    type: 'bubble',
                    data: { datasets: [{ label: 'Campaign', data: pts, backgroundColor: '#CB3CFF' }] },
                    options: { responsive: true, plugins: { tooltip: { callbacks: { label: ctx => { const item = ctx.raw || {}; const total = Number(item.meta?.Total ?? item.meta?.total ?? 0); return `Campaign ${item.x}: ${numberFormatter.format(item.y)}% (n=${total})`; } } }, legend: { labels: { color: 'white' } } }, scales: { x: { type: 'linear', title: { display: true, text: 'Campaign', color: 'white' }, ticks: { color: 'white', precision: 0 } }, y: { title: { display: true, text: 'Conversion Rate (%)', color: 'white' }, ticks: { color: 'white' }, beginAtZero: true } }, interaction: { mode: 'nearest', intersect: false } }
                });
                canvas._chartInstance = chart;
            })();

            // Señal de éxito global
            window.__dash_init_done = true;
            console.debug('[dash] init done');
        } catch (err) {
            // Si ocurre un error en el renderizado general lo registramos sin romper la UI.
            window.__dash_init_error = String(err);
            window.__dash_init_done = true;
            console.error('[dash] init failed', err);
        }

        // Función auxiliar para que otras partes esperen a que la inicialización termine.
        window.__dash_wait_for_init = function(timeoutMs = 2000) {
            return new Promise((resolve) => {
                const start = Date.now();
                (function check() {
                    if (window.__dash_init_done) {
                        resolve({ ok: window.__dash_init_error === null, error: window.__dash_init_error });
                        return;
                    }
                    if ((Date.now() - start) >= timeoutMs) {
                        resolve({ ok: false, error: 'timeout waiting for init' });
                        return;
                    }
                    setTimeout(check, 50);
                })();
            });
        };
    </script>

    <!-- Export a PDF y otras utilidades -->
    <script>
    (function () {
        // Recopila resumen de filtros aplicados para incluir en el PDF
        function collectFiltersSummary() {
            const summary = [];
            const groups = {};
            document.querySelectorAll('input[type="checkbox"][data-filter]').forEach(cb => {
                const key = cb.dataset.filter;
                groups[key] = groups[key] || [];
                if (cb.checked) groups[key].push(cb.value);
            });
            for (const k of Object.keys(groups)) {
                if (groups[k].length) summary.push(`${k}: ${groups[k].join(', ')}`);
                else summary.push(`${k}: (none)`);
            }
            document.querySelectorAll('.custom-slider[data-param]').forEach(s => {
                const p = s.dataset.param;
                const v = s.dataset.currentValue ?? s.dataset.value ?? '';
                summary.push(`${p}: ${v}`);
            });
            return summary.join('  •  ');
        }

        async function exportDashboardPdf() {
            try {
                const exportBtn = document.getElementById('exportPdfBtn');
                exportBtn.disabled = true;
                exportBtn.textContent = 'Preparing PDF...';

                const container = document.querySelector('.dashboard-container');
                if (!container) throw new Error('Dashboard container not found');

                // Snapshot con html2canvas, escala para mayor resolución
                const canvas = await html2canvas(container, { scale: 2, useCORS: true, backgroundColor: getComputedStyle(document.body).backgroundColor || '#ffffff' });
                const imgData = canvas.toDataURL('image/png');
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF({ orientation: 'landscape', unit: 'pt', format: 'a4' });
                const pageWidth = pdf.internal.pageSize.getWidth();
                const pageHeight = pdf.internal.pageSize.getHeight();
                const imgWidth = pageWidth;
                const imgHeight = (canvas.height * imgWidth) / canvas.width;

                if (imgHeight <= pageHeight) {
                    pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
                } else {
                    const ratio = canvas.width / imgWidth;
                    let renderedHeight = 0;
                    while (renderedHeight < canvas.height) {
                        const sliceH = Math.min(Math.floor(pageHeight * ratio), canvas.height - renderedHeight);
                        const sliceCanvas = document.createElement('canvas');
                        sliceCanvas.width = canvas.width;
                        sliceCanvas.height = sliceH;
                        const ctx = sliceCanvas.getContext('2d');
                        ctx.drawImage(canvas, 0, renderedHeight, sliceCanvas.width, sliceCanvas.height, 0, 0, sliceCanvas.width, sliceCanvas.height);
                        const sliceData = sliceCanvas.toDataURL('image/png');
                        pdf.addImage(sliceData, 'PNG', 0, 0, imgWidth, sliceCanvas.height / ratio);
                        renderedHeight += sliceH;
                        if (renderedHeight < canvas.height) pdf.addPage();
                    }
                }

                // Página final: resumen de filtros
                const filterSummary = collectFiltersSummary();
                if (filterSummary) {
                    pdf.addPage();
                    pdf.setFontSize(12);
                    pdf.text('Filters applied (summary):', 40, 40);
                    const split = pdf.splitTextToSize(filterSummary, pageWidth - 80);
                    pdf.text(split, 40, 60);
                }

                const filename = `dashboard_report_${new Date().toISOString().replace(/[:.]/g,'-')}.pdf`;
                pdf.save(filename);
            } catch (err) {
                console.error('Export PDF failed', err);
                alert('Export failed: ' + (err.message || err));
            } finally {
                const exportBtn = document.getElementById('exportPdfBtn');
                if (exportBtn) { exportBtn.disabled = false; exportBtn.textContent = 'Export PDF'; }
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const btn = document.getElementById('exportPdfBtn');
            if (btn) btn.addEventListener('click', exportDashboardPdf);
        });
    })();
    </script>
}