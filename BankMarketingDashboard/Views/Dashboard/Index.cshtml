@using BankMarketingDashboard.Models
@{
    ViewData["Title"] = "Reports";

    // Métricas principales recibidas desde el controlador
    var totalContacts = ViewBag.TotalContacts as int? ?? 0;
    var conversionRate = ViewBag.ConversionRate as double? ?? 0;
    var avgDuration = ViewBag.AvgDuration as double? ?? 0;
    var successfulCalls = ViewBag.SuccessfulCalls as int? ?? 0;

    // Datos preparados para los gráficos (lista de ChartPoint)
    var maritalData = ViewBag.MaritalData as List<ChartPoint> ?? new List<ChartPoint>();
    var jobData = ViewBag.JobData as List<ChartPoint> ?? new List<ChartPoint>();
    var educationData = ViewBag.EducationData as List<ChartPoint> ?? new List<ChartPoint>();
    var contactData = ViewBag.ContactData as List<ChartPoint> ?? new List<ChartPoint>();
    var ageData = ViewBag.AgeData as List<ChartPoint> ?? new List<ChartPoint>();
    var conversionByAge = ViewBag.ConversionByAge as List<ChartPoint> ?? new List<ChartPoint>();
}

<div class="dashboard-container">
    <h2>Marketing Campaign Dashboard</h2>

    <!-- Tarjetas con métricas KPI's -->
    <div class="kpi-cards mb-4">
        <div class="card">
            <div class="card-body">
                <h6>Total Contacts</h6>
                <p class="fs-4">@totalContacts.ToString("N0")</p>
            </div>
        </div>
        <div class="card">
            <div class="card-body">
                <h6>Conversion Rate</h6>
                <p class="fs-4">@conversionRate.ToString("F2")%</p>
            </div>
        </div>
        <div class="card">
            <div class="card-body">
                <h6>Avg. Duration</h6>
                <p class="fs-4">@avgDuration.ToString("F0") s</p>
            </div>
        </div>
        <div class="card">
            <div class="card-body">
                <h6>Successful Calls</h6>
                <p class="fs-4">@successfulCalls.ToString("N0")</p>
            </div>
        </div>
    </div>

    <!-- Sección de gráficos -->
    <div class="row">
        <!-- Civil Status (donut) -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Civil Status Distribution</h5>
                <canvas id="maritalChart"></canvas>
            </div>
        </div>

        <!-- Occupation (barras) -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Occupation Distribution</h5>
                <canvas id="jobChart"></canvas>
            </div>
        </div>

        <!-- Education (barras horizontales) -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Education Level</h5>
                <canvas id="educationChart"></canvas>
            </div>
        </div>

        <!-- Contact Channel -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Contact Channel</h5>
                <canvas id="contactChart"></canvas>
            </div>
        </div>

        <!-- Age Distribution -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Age Distribution</h5>
                <canvas id="ageChart"></canvas>
            </div>
        </div>

        <!-- Conversion by Age -->
        <div class="col-md-6 mb-4">
            <div class="chart-container">
                <h5 class="chart-title">Conversion Rate by Age Group</h5>
                <canvas id="conversionAgeChart"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Serialización de los datos para uso en el cliente
        const maritalLabels = @Html.Raw(Json.Serialize(maritalData.Select(m => m.Label ?? "Unknown").ToArray()));
        const maritalValues = @Html.Raw(Json.Serialize(maritalData.Select(m => m.Value).ToArray()));

        const jobLabels = @Html.Raw(Json.Serialize(jobData.Select(j => j.Label ?? "Unknown").ToArray()));
        const jobValues = @Html.Raw(Json.Serialize(jobData.Select(j => j.Value).ToArray()));

        const educationLabels = @Html.Raw(Json.Serialize(educationData.Select(e => e.Label ?? "Unknown").ToArray()));
        const educationValues = @Html.Raw(Json.Serialize(educationData.Select(e => e.Value).ToArray()));

        const contactLabels = @Html.Raw(Json.Serialize(contactData.Select(c => c.Label ?? "Unknown").ToArray()));
        const contactValues = @Html.Raw(Json.Serialize(contactData.Select(c => c.Value).ToArray()));

        const ageLabels = @Html.Raw(Json.Serialize(ageData.Select(a => a.Label).ToArray()));
        const ageValues = @Html.Raw(Json.Serialize(ageData.Select(a => a.Value).ToArray()));

        const conversionAgeLabels = @Html.Raw(Json.Serialize(conversionByAge.Select(c => c.Label).ToArray()));
        const conversionAgeValues = @Html.Raw(Json.Serialize(conversionByAge.Select(c => c.Value).ToArray()));

        // Función auxiliar: convierte valores a números válidos
        function safeNumbers(arr) {
            if (!Array.isArray(arr)) return [];
            return arr.map(v => {
                const n = Number(v);
                return Number.isFinite(n) ? n : 0;
            });
        }

        // Crea un gráfico sólo si las entradas son coherentes
        function createChartIfValid(canvasId, type, labels, rawValues, cfgOptions, background) {
            try {
                if (!labels || !Array.isArray(labels) || labels.length === 0) {
                    console.warn(`Skipping chart ${canvasId}: no labels`);
                    return;
                }
                if (!rawValues || !Array.isArray(rawValues) || rawValues.length === 0) {
                    console.warn(`Skipping chart ${canvasId}: no values`);
                    return;
                }
                const values = safeNumbers(rawValues);
                if (labels.length !== values.length) {
                    console.warn(`Skipping chart ${canvasId}: labels/values length mismatch`, labels.length, values.length);
                    return;
                }
                const ctx = document.getElementById(canvasId);
                if (!ctx) {
                    console.warn(`Canvas ${canvasId} not found`);
                    return;
                }
                new Chart(ctx, {
                    type,
                    data: { labels, datasets: [{ data: values, backgroundColor: background || '#CB3CFF' }] },
                    options: cfgOptions || { responsive: true }
                });
            } catch (ex) {
                console.error(`Error creating chart ${canvasId}`, ex);
            }
        }

        // Inicialización de gráficos con opciones visuales
        createChartIfValid('maritalChart', 'doughnut', maritalLabels, maritalValues, {
            responsive: true,
            plugins: { legend: { labels: { color: 'white' } } }
        }, ['#CB3CFF', '#4e73df', '#1cc88a', '#e74a3b']);

        createChartIfValid('jobChart', 'bar', jobLabels, jobValues, {
            responsive: true,
            scales: { y: { beginAtZero: true, ticks: { color: 'white' } }, x: { ticks: { color: 'white' } } },
            plugins: { legend: { display: false } }
        }, '#CB3CFF');

        createChartIfValid('educationChart', 'bar', educationLabels, educationValues, {
            responsive: true,
            indexAxis: 'y',
            scales: { x: { beginAtZero: true, ticks: { color: 'white' } }, y: { ticks: { color: 'white' } } },
            plugins: { legend: { display: false } }
        }, '#4e73df');

        createChartIfValid('contactChart', 'bar', contactLabels, contactValues, {
            responsive: true,
            scales: { y: { beginAtZero: true, ticks: { color: 'white' } }, x: { ticks: { color: 'white' } } },
            plugins: { legend: { display: false } }
        }, ['#CB3CFF', '#1cc88a']);

        createChartIfValid('ageChart', 'bar', ageLabels, ageValues, {
            responsive: true,
            scales: { y: { beginAtZero: true, ticks: { color: 'white' } }, x: { ticks: { color: 'white' } } },
            plugins: { legend: { display: false } }
        }, '#e74a3b');

        createChartIfValid('conversionAgeChart', 'bar', conversionAgeLabels, conversionAgeValues, {
            responsive: true,
            scales: {
                y: { beginAtZero: true, ticks: { color: 'white', callback: v => v + '%' } },
                x: { ticks: { color: 'white' } }
            },
            plugins: { legend: { display: false } }
        }, '#1cc88a');
    </script>
}